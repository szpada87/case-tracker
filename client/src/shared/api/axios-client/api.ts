/* tslint:disable */
/* eslint-disable */
/**
 * data
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CaseDetailsResponse
 */
export interface CaseDetailsResponse {
    /**
     * 
     * @type {number}
     * @memberof CaseDetailsResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseDetailsResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseDetailsResponse
     */
    'created'?: string;
    /**
     * 
     * @type {CaseStatus}
     * @memberof CaseDetailsResponse
     */
    'status'?: CaseStatus;
    /**
     * 
     * @type {string}
     * @memberof CaseDetailsResponse
     */
    'expire'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseDetailsResponse
     */
    'ownerId'?: string | null;
}
/**
 * 
 * @export
 * @interface CaseResponse
 */
export interface CaseResponse {
    /**
     * 
     * @type {number}
     * @memberof CaseResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseResponse
     */
    'created'?: string;
    /**
     * 
     * @type {CaseStatus}
     * @memberof CaseResponse
     */
    'status'?: CaseStatus;
    /**
     * 
     * @type {string}
     * @memberof CaseResponse
     */
    'expire'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseResponse
     */
    'ownerId'?: string | null;
}
/**
 * 
 * @export
 * @interface CaseResponsePagedResponse
 */
export interface CaseResponsePagedResponse {
    /**
     * 
     * @type {Array<CaseResponse>}
     * @memberof CaseResponsePagedResponse
     */
    'data'?: Array<CaseResponse> | null;
    /**
     * 
     * @type {number}
     * @memberof CaseResponsePagedResponse
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseResponsePagedResponse
     */
    'nextPage'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CaseStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type CaseStatus = typeof CaseStatus[keyof typeof CaseStatus];


/**
 * 
 * @export
 * @interface CreateCaseRequest
 */
export interface CreateCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCaseRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {CaseStatus}
     * @memberof CreateCaseRequest
     */
    'status'?: CaseStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateCaseRequest
     */
    'expire'?: string | null;
}
/**
 * 
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HttpValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HttpValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
}

/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allCases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetailsById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caseDetailsById', 'id', id)
            const localVarPath = `/api/data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates new case.
         * @param {CreateCaseRequest} createCaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase: async (createCaseRequest: CreateCaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCaseRequest' is not null or undefined
            assertParamExists('createCase', 'createCaseRequest', createCaseRequest)
            const localVarPath = `/api/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allCases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CaseDetailsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allCases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseDetailsById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseDetailsById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates new case.
         * @param {CreateCaseRequest} createCaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCase(createCaseRequest: CreateCaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCase(createCaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allCases(options?: any): AxiosPromise<Array<CaseDetailsResponse>> {
            return localVarFp.allCases(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetailsById(id: number, options?: any): AxiosPromise<CaseDetailsResponse> {
            return localVarFp.caseDetailsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates new case.
         * @param {CreateCaseRequest} createCaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase(createCaseRequest: CreateCaseRequest, options?: any): AxiosPromise<CaseDetailsResponse> {
            return localVarFp.createCase(createCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<string> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for caseDetailsById operation in DataApi.
 * @export
 * @interface DataApiCaseDetailsByIdRequest
 */
export interface DataApiCaseDetailsByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DataApiCaseDetailsById
     */
    readonly id: number
}

/**
 * Request parameters for createCase operation in DataApi.
 * @export
 * @interface DataApiCreateCaseRequest
 */
export interface DataApiCreateCaseRequest {
    /**
     * 
     * @type {CreateCaseRequest}
     * @memberof DataApiCreateCase
     */
    readonly createCaseRequest: CreateCaseRequest
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public allCases(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).allCases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DataApiCaseDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public caseDetailsById(requestParameters: DataApiCaseDetailsByIdRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).caseDetailsById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates new case.
     * @param {DataApiCreateCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public createCase(requestParameters: DataApiCreateCaseRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).createCase(requestParameters.createCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} currentPage 
         * @param {number} pageSize 
         * @param {string} [sourceFields] 
         * @param {string} [freeTextSearch] 
         * @param {string} [sortBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCases: async (currentPage: number, pageSize: number, sourceFields?: string, freeTextSearch?: string, sortBy?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currentPage' is not null or undefined
            assertParamExists('searchCases', 'currentPage', currentPage)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchCases', 'pageSize', pageSize)
            const localVarPath = `/api/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (sourceFields !== undefined) {
                localVarQueryParameter['sourceFields'] = sourceFields;
            }

            if (freeTextSearch !== undefined) {
                localVarQueryParameter['freeTextSearch'] = freeTextSearch;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} currentPage 
         * @param {number} pageSize 
         * @param {string} [sourceFields] 
         * @param {string} [freeTextSearch] 
         * @param {string} [sortBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCases(currentPage: number, pageSize: number, sourceFields?: string, freeTextSearch?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCases(currentPage, pageSize, sourceFields, freeTextSearch, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @param {number} currentPage 
         * @param {number} pageSize 
         * @param {string} [sourceFields] 
         * @param {string} [freeTextSearch] 
         * @param {string} [sortBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCases(currentPage: number, pageSize: number, sourceFields?: string, freeTextSearch?: string, sortBy?: string, sortOrder?: string, options?: any): AxiosPromise<CaseResponsePagedResponse> {
            return localVarFp.searchCases(currentPage, pageSize, sourceFields, freeTextSearch, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchCases operation in SearchApi.
 * @export
 * @interface SearchApiSearchCasesRequest
 */
export interface SearchApiSearchCasesRequest {
    /**
     * 
     * @type {number}
     * @memberof SearchApiSearchCases
     */
    readonly currentPage: number

    /**
     * 
     * @type {number}
     * @memberof SearchApiSearchCases
     */
    readonly pageSize: number

    /**
     * 
     * @type {string}
     * @memberof SearchApiSearchCases
     */
    readonly sourceFields?: string

    /**
     * 
     * @type {string}
     * @memberof SearchApiSearchCases
     */
    readonly freeTextSearch?: string

    /**
     * 
     * @type {string}
     * @memberof SearchApiSearchCases
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof SearchApiSearchCases
     */
    readonly sortOrder?: string
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @param {SearchApiSearchCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchCases(requestParameters: SearchApiSearchCasesRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchCases(requestParameters.currentPage, requestParameters.pageSize, requestParameters.sourceFields, requestParameters.freeTextSearch, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
}


